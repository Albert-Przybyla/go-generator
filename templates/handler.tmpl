package handlers

import (
  "{{.RepoName}}/{{.Paths.Services}}"
  "{{.RepoName}}/{{.Paths.Dtos}}"
  "net/http"

  "github.com/gin-gonic/gin"
)

type {{.PascalCase}}Handler struct {
	service *services.{{.PascalCase}}Service
}

func New{{.PascalCase}}Handler({{.CamelCase}}Service *services.{{.PascalCase}}Service) *{{.PascalCase}}Handler {
	return &{{.PascalCase}}Handler{service: {{.CamelCase}}Service}
}

// @Summary Create{{.PascalCase}}
// @Description Create a new {{.NormalCase}}
// @Tags {{.PascalCase}}
// @Accept json
// @Produce json
// @Param {{.CamelCase}}Request body dtos.{{.PascalCase}}Request true "Create {{.PascalCase}} Request"
// @Success 201 {object} dtos.{{.PascalCase}}Response
// @Router /{{.KebabCase}} [post]
func (h *{{.PascalCase}}Handler) create{{.PascalCase}}(c *gin.Context) {
  var body dtos.{{.PascalCase}}Request
  if err := utils.ValidateStruct(c, &body); err != nil {
		c.JSON(err.StatusCode, err)
		return
	}

  {{.CamelCase}}Response, err := h.service.Create{{.PascalCase}}(&body)
  if err != nil {
    c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
    return
  }

  c.JSON(http.StatusCreated, {{.CamelCase}}Response)
}


// @Summary Get{{.PascalCase}}ByID
// @Description Get {{.NormalCase}} by ID
// @Tags {{.PascalCase}}
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} dtos.{{.PascalCase}}Response
// @Router /{{.KebabCase}}/{id} [get]
func (h *{{.PascalCase}}Handler) get{{.PascalCase}}ByID(c *gin.Context) {
  id := c.Param("id")

  {{.CamelCase}}Response, err := h.service.Get{{.PascalCase}}ByID(id)
  if err != nil {
    c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
    return
  }

  c.JSON(http.StatusOK, {{.CamelCase}}Response)
}

// @Summary Update{{.PascalCase}}
// @Description Update {{.NormalCase}}
// @Tags {{.PascalCase}}
// @Accept json
// @Produce json
// @Param {{.CamelCase}}Request body dtos.{{.PascalCase}}Request true "Update {{.PascalCase}} Request"
// @Param id path string true "ID"
// @Success 200 {object} dtos.{{.PascalCase}}Response
// @Router /{{.KebabCase}}/{id} [put]
func (h *{{.PascalCase}}Handler) update{{.PascalCase}}(c *gin.Context) {
  id := c.Param("id")
  var body dtos.{{.PascalCase}}Request
  if err := utils.ValidateStruct(c, &body); err != nil {
    c.JSON(err.StatusCode, err)
    return
  }

  {{.CamelCase}}Response, err := h.service.Update{{.PascalCase}}(id, &body)
  if err != nil {
    c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
    return
  }

  c.JSON(http.StatusOK, {{.CamelCase}}Response)
}

// @Summary Delete{{.PascalCase}}
// @Description Delete {{.NormalCase}} by ID
// @Tags {{.PascalCase}}
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 204
// @Router /{{.KebabCase}}/{id} [delete]
func (h *{{.PascalCase}}Handler) delete{{.PascalCase}}(c *gin.Context) {
  id := c.Param("id")

  err := h.service.Delete{{.PascalCase}}(id)
  if err != nil {
    c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
    return
  }

  c.JSON(http.StatusNoContent, nil)
}

// @Summary ListAll{{.PascalCase}}s
// @Description List all {{.NormalCase}}s
// @Tags {{.PascalCase}}
// @Accept json
// @Produce json
// @Success 200 {array} dtos.{{.PascalCase}}Response
// @Router /{{.KebabCase}}/all [get]
func (h *{{.PascalCase}}Handler) listAll{{.PascalCase}}s(c *gin.Context) {
  {{.CamelCase}}Response, err := h.service.ListAll{{.PascalCase}}s()
  if err != nil {
    c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
    return
  }

  c.JSON(http.StatusOK, {{.CamelCase}}Response)
}

// @Summary List{{.PascalCase}}s
// @Description List {{.NormalCase}}s with pagination
// @Tags {{.PascalCase}}
// @Accept json
// @Produce json
// @Param page query int false "Page number"
// @Param limit query int false "Page size"
// @Success 200 {object} dtos.PaginatedResponse{data=[]dtos.{{.PascalCase}}Response}
// @Router /{{.KebabCase}} [get]
func (h *{{.PascalCase}}Handler) list{{.PascalCase}}s(c *gin.Context) {
  page, limit := utils.GetPaginationParams(c)

  {{.CamelCase}}Response, err := h.service.List{{.PascalCase}}s(page, limit)
  if err != nil {
    c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
    return
  }

  c.JSON(http.StatusOK, {{.CamelCase}}Response)
}

func (h *{{.PascalCase}}Handler) RegisterRoutes(router *gin.RouterGroup) {
	g := router.Group("/{{.KebabCase}}")
	{
    g.GET("/all", h.listAll{{.PascalCase}}s)
    g.GET("", h.list{{.PascalCase}}s)
    g.POST("", h.create{{.PascalCase}})
    g.GET("/:id", h.get{{.PascalCase}}ByID)
    g.PUT("/:id", h.update{{.PascalCase}})
    g.DELETE("/:id", h.delete{{.PascalCase}})
	}
}
