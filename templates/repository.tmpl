package repositories

import (
  "{{.RepoName}}/{{.Paths.Models}}"
  
  "gorm.io/gorm"
)

type {{.PascalCase}}Repository struct {
	db *gorm.DB
}

func (r *{{.PascalCase}}Repository) Create{{.PascalCase}}({{.CamelCase}} *models.{{.PascalCase}}) error {
  return r.db.Create({{.CamelCase}}).Error
}

func (r *{{.PascalCase}}Repository) Get{{.PascalCase}}ByID(id string) (*models.{{.PascalCase}}, error) {
  var {{.CamelCase}} models.{{.PascalCase}}
  if err := r.db.First(&{{.CamelCase}}, id).Error; err != nil {
    return nil, err
  }
  return &{{.CamelCase}}, nil
}

func (r *{{.PascalCase}}Repository) Update{{.PascalCase}}(id string, {{.CamelCase}} *models.{{.PascalCase}}) error {
  return r.db.Model(&models.{{.PascalCase}}{}).Where("id = ?", id).Updates({{.CamelCase}}).Error
}

func (r *{{.PascalCase}}Repository) Delete{{.PascalCase}}(id string) error {
  return r.db.Where("id = ?", id).Delete(&models.{{.PascalCase}}{}).Error
}

func (r *{{.PascalCase}}Repository) ListAll{{.PascalCase}}s() ([]*models.{{.PascalCase}}, error) {
  var {{.CamelCase}}s []*models.{{.PascalCase}}
  if err := r.db.Find(&{{.CamelCase}}s).Error; err != nil {
    return nil, err
  }
  return {{.CamelCase}}s, nil
}

func (r *{{.PascalCase}}Repository) List{{.PascalCase}}s(page, pageSize int) ([]*models.{{.PascalCase}}, error) {
  var {{.CamelCase}}s []*models.{{.PascalCase}}
  if err := r.db.Offset((page - 1) * pageSize).Limit(pageSize).Find(&{{.CamelCase}}s).Error; err != nil {
    return nil, err
  }
  return {{.CamelCase}}s, nil
} 

func (r *{{.PascalCase}}Repository) Count{{.PascalCase}}s() (int64, error) {
  var count int64
  if err := r.db.Model(&models.{{.PascalCase}}{}).Count(&count).Error; err != nil {
    return 0, err
  }
  return count, nil
}

func (r *{{.PascalCase}}Repository) Get{{.PascalCase}}ByField(field string, value interface{}) ([]*models.{{.PascalCase}}, error) {
  var {{.CamelCase}}s []*models.{{.PascalCase}}
  if err := r.db.Where(field+" = ?", value).Find(&{{.CamelCase}}s).Error; err != nil {
    return nil, err
  }
  return {{.CamelCase}}s, nil
}