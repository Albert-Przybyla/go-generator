package services

import (
  "{{.RepoName}}/{{.Paths.Repositories}}"
  "{{.RepoName}}/{{.Paths.Mappers}}"
  "{{.RepoName}}/{{.Paths.Dtos}}"
)

type {{.PascalCase}}Service struct {
	{{.CamelCase}}Repo *repositories.{{.PascalCase}}Repository
}

func New{{.PascalCase}}Service({{.CamelCase}}Repo *repositories.{{.PascalCase}}Repository) *{{.PascalCase}}Service {
  return &{{.PascalCase}}Service{
    {{.CamelCase}}Repo: {{.CamelCase}}Repo,
  }
}

func (s *{{.PascalCase}}Service) Create{{.PascalCase}}({{.CamelCase}}Request *dtos.{{.PascalCase}}Request) (*dtos.{{.PascalCase}}Response, error) {
  {{.CamelCase}} := mappers.Map{{.PascalCase}}ToModel({{.CamelCase}}Request)

  if err := s.{{.CamelCase}}Repo.Create{{.PascalCase}}({{.CamelCase}}); err != nil {
    return nil, err
  }
  return mappers.Map{{.PascalCase}}ToResponse({{.CamelCase}}), nil
}

func (s *{{.PascalCase}}Service) Get{{.PascalCase}}ByID(id string) (*dtos.{{.PascalCase}}Response, error) {
  {{.CamelCase}}, err := s.{{.CamelCase}}Repo.Get{{.PascalCase}}ByID(id)
  if err != nil {
    return nil, err
  }
  return mappers.Map{{.PascalCase}}ToResponse({{.CamelCase}}), nil
}

func (s *{{.PascalCase}}Service) Update{{.PascalCase}}(id string, {{.CamelCase}}Request *dtos.{{.PascalCase}}Request) (*dtos.{{.PascalCase}}Response, error) {
  {{.CamelCase}} := mappers.Map{{.PascalCase}}ToModel({{.CamelCase}}Request)

  if err := s.{{.CamelCase}}Repo.Update{{.PascalCase}}(id, {{.CamelCase}}); err != nil {
    return nil, err
  }
  return mappers.Map{{.PascalCase}}ToResponse({{.CamelCase}}), nil
}

func (s *{{.PascalCase}}Service) Delete{{.PascalCase}}(id string) error {
  if err := s.{{.CamelCase}}Repo.Delete{{.PascalCase}}(id); err != nil {
    return err
  }
  return nil
}

func (s *{{.PascalCase}}Service) ListAll{{.PascalCase}}s() ([]*dtos.{{.PascalCase}}Response, error) {
  {{.CamelCase}}s, err := s.{{.CamelCase}}Repo.ListAll{{.PascalCase}}s()
  if err != nil {
    return nil, err
  }
  return mappers.Map{{.PascalCase}}ListToResponse({{.CamelCase}}s), nil
}

func (s *{{.PascalCase}}Service) List{{.PascalCase}}s(page, limit int) (*dtos.PaginatedResponse, error) {
  {{.CamelCase}}s, err := s.{{.CamelCase}}Repo.List{{.PascalCase}}s(page, limit)
  if err != nil {
    return nil, err
  }

  totalRecords, err := s.{{.CamelCase}}Repo.Count{{.PascalCase}}s()

  totalPages := int((totalRecords + int64(limit) - 1) / int64(limit))

  return &dtos.PaginatedResponse{
		Data:       mappers.Map{{.PascalCase}}ListToResponse({{.CamelCase}}s),
		TotalPages: totalPages,
		Page:       page,
	}, nil
}