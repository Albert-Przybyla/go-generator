package services

import (
  "{{.RepoName}}/{{.Paths.Repositories}}"
  "{{.RepoName}}/{{.Paths.Mappers}}"
  "{{.RepoName}}/{{.Paths.Dtos}}"
)

type {{.StructName}}Service struct {
	{{.VarName}}Repo *repositories.{{.StructName}}Repository
}

func New{{.StructName}}Service({{.VarName}}Repo *repositories.{{.StructName}}Repository) *{{.StructName}}Service {
  return &{{.StructName}}Service{
    {{.VarName}}Repo: {{.VarName}}Repo,
  }
}

func (s *{{.StructName}}Service) Create{{.StructName}}({{.VarName}}Request *dtos.{{.StructName}}Request) (*dtos.{{.StructName}}Response, error) {
  {{.VarName}} := mappers.Map{{.StructName}}ToModel({{.VarName}}Request)

  if err := s.{{.VarName}}Repo.Create{{.StructName}}({{.VarName}}); err != nil {
    return nil, err
  }
  return mappers.Map{{.StructName}}ToResponse({{.VarName}}), nil
}

func (s *{{.StructName}}Service) Get{{.StructName}}ByID(id string) (*dtos.{{.StructName}}Response, error) {
  {{.VarName}}, err := s.{{.VarName}}Repo.Get{{.StructName}}ByID(id)
  if err != nil {
    return nil, err
  }
  return mappers.Map{{.StructName}}ToResponse({{.VarName}}), nil
}

func (s *{{.StructName}}Service) Update{{.StructName}}({{.VarName}}Request *dtos.{{.StructName}}Request) (*dtos.{{.StructName}}Response, error) {
  {{.VarName}} := mappers.Map{{.StructName}}ToModel({{.VarName}}Request)

  if err := s.{{.VarName}}Repo.Update{{.StructName}}({{.VarName}}); err != nil {
    return nil, err
  }
  return mappers.Map{{.StructName}}ToResponse({{.VarName}}), nil
}

func (s *{{.StructName}}Service) Delete{{.StructName}}({{.VarName}}Request *dtos.{{.StructName}}Request) error {
  {{.VarName}} := mappers.Map{{.StructName}}ToModel({{.VarName}}Request)

  if err := s.{{.VarName}}Repo.Delete{{.StructName}}({{.VarName}}); err != nil {
    return err
  }
  return nil
}

func (s *{{.StructName}}Service) ListAll{{.StructName}}() ([]*dtos.{{.StructName}}Response, error) {
  {{.VarName}}s, err := s.{{.VarName}}Repo.ListAll{{.StructName}}()
  if err != nil {
    return nil, err
  }
  return mappers.Map{{.StructName}}ListToResponse({{.VarName}}s), nil
}
